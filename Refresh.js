// ‚Äî‚Äî Helpers ‚Äî‚Äî
function waitFor(selector, timeout = 5000) {
  return new Promise((resolve, reject) => {
    const interval = 100;
    let elapsed = 0;
    const timer = setInterval(() => {
      const el = document.querySelector(selector);
      if (el) {
        clearInterval(timer);
        resolve(el);
      } else if ((elapsed += interval) >= timeout) {
        clearInterval(timer);
        reject(new Error(`Timeout waiting for ${selector}`));
      }
    }, interval);
  });
}

async function clickAndLog(selector, label, timeout) {
  const btn = timeout
    ? await waitFor(selector, timeout).catch(() => null)
    : document.querySelector(selector);
  if (btn) {
    btn.click();
    console.log(`‚úÖ ${label}`);
    return true;
  } else {
    console.warn(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö ${label}`);
    return false;
  }
}

// ‚Äî‚Äî Core functions ‚Äî‚Äî

// 1. ‡∏™‡∏∏‡πà‡∏°‡∏ó‡∏∏‡∏Å‡∏Ç‡πâ‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
async function doRefreshAll(delay = 100) {
  const buttons = document.querySelectorAll(".halflings-icon.refresh");
  console.log(`üîÑ [Refresh] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏∏‡πà‡∏° ${buttons.length} ‡∏ä‡πà‡∏≠‡∏á...`);
  for (let btn of buttons) {
    btn.click();
    await new Promise(r => setTimeout(r, delay));
  }
}

// 2. ‡∏Ñ‡∏•‡∏¥‡∏Å Correction
async function doCorrection(delay = 500) {
  console.log("üéØ [Refresh] ‡∏Å‡∏î Correction...");
  const ok = await clickAndLog(".action-exercise-button.correct", "‡∏õ‡∏∏‡πà‡∏° Correction", 3000);
  if (ok) await new Promise(r => setTimeout(r, delay));
  return ok;
}

// 3. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î
async function fixIncorrect(loopDelay = 100, maxRetries = 10) {
  let tries = 0;
  while (tries < maxRetries) {
    const wrongs = document.querySelectorAll(".input-group.has-error");
    if (wrongs.length === 0) {
      console.log("üéâ ‡∏ó‡∏∏‡∏Å‡∏Ç‡πâ‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!");
      return true;
    }
    console.log(`‚ùå [Refresh] ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î ${wrongs.length} ‡∏Ç‡πâ‡∏≠ (‡∏•‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${tries + 1})...`);
    for (let q of wrongs) {
      const btn = q.querySelector(".halflings-icon.refresh");
      if (btn) {
        btn.click();
        await new Promise(r => setTimeout(r, loopDelay));
      }
    }
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏ã‡πâ‡∏≥
    await doCorrection();
    tries++;
  }
  console.error("‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏ô‡∏£‡∏≠‡∏ö‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î");
  return false;
}

// 4. ‡πÑ‡∏õ Next
async function goNext(timeout = 5000) {
  console.log("‚û°Ô∏è ‡∏£‡∏≠‡∏õ‡∏∏‡πà‡∏° Next...");
  const ok = await clickAndLog(".action-exercise-button.next", "‡∏õ‡∏∏‡πà‡∏° Next", timeout);
  return ok;
}

// ‚Äî‚Äî Main ‚Äî‚Äî 
async function refreshSolve() {
  console.log("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° refreshSolve()");
  await doRefreshAll();
  if (!await doCorrection()) return;
  if (!await fixIncorrect()) return;
  await goNext();
}

refreshSolve();
