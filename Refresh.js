// ‚Äî‚Äî Helpers ‚Äî‚Äî  
function wait(ms) {  
  return new Promise(r => setTimeout(r, ms));  
}

async function clickAndLog(selector, label, timeout) {
  let btn;
  if (timeout) {
    const start = Date.now();
    while (!btn && Date.now() - start < timeout) {
      btn = document.querySelector(selector);
      if (!btn) await wait(50);
    }
  } else {
    btn = document.querySelector(selector);
  }
  if (btn) {
    btn.click();
    console.log(‚úÖ ${label});
    return true;
  } else {
    console.warn(‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö ${label});
    return false;
  }
}

function getScore() {
  const el = document.querySelector(".result-badge-text");
  return el ? parseInt(el.dataset.result || "0", 10) : 0;
}

// ‚Äî‚Äî Core functions ‚Äî‚Äî  

// 1. ‡∏™‡∏∏‡πà‡∏°‡∏ó‡∏∏‡∏Å‡∏Ç‡πâ‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô  
async function doRefreshAll(delay = 10) {  
  const buttons = document.querySelectorAll(".halflings-icon.refresh");  
  console.log(üîÑ [Refresh] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏∏‡πà‡∏° ${buttons.length} ‡∏ä‡πà‡∏≠‡∏á...);  
  for (let btn of buttons) {  
    btn.click();  
    await wait(delay);  
  }  
}

// 2. ‡∏Ñ‡∏•‡∏¥‡∏Å Correction  
async function doCorrection(delay = 1000) {  
  console.log("üéØ [Refresh] ‡∏Å‡∏î Correction...");  
  const ok = await clickAndLog(".action-exercise-button.correct", "‡∏õ‡∏∏‡πà‡∏° Correction", 3000);  
  if (ok) await wait(delay);  
  return ok;  
}

// 3. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏¥‡∏°‡∏¥‡∏ï)  
async function fixIncorrect(loopDelay = 10) {  
  let wrongs;  
  do {  
    wrongs = Array.from(document.querySelectorAll(".input-group.has-error"));  
    if (wrongs.length) {  
      console.log(‚ùå [Refresh] ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î ${wrongs.length} ‡∏Ç‡πâ‡∏≠ ‚Üí ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà...);  
      for (let q of wrongs) {  
        const btn = q.querySelector(".halflings-icon.refresh");  
        if (btn) {  
          btn.click();  
          await wait(loopDelay);  
        }  
      }  
      await doCorrection();  
    }  
  } while (wrongs.length);  
  console.log("üéâ [Refresh] ‡∏ó‡∏∏‡∏Å‡∏Ç‡πâ‡∏≠‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß!");  
}

// 4. ‡πÑ‡∏õ Next  
async function goNext(timeout = 5000) {  
  console.log("‚û°Ô∏è ‡∏£‡∏≠‡∏õ‡∏∏‡πà‡∏° Next...");  
  const ok = await clickAndLog(".action-exercise-button.next", "‡∏õ‡∏∏‡πà‡∏° Next", timeout);  
  if (ok) await wait(1000);  
  return ok;  
}

// ‚Äî‚Äî Main ‚Äî‚Äî  
async function refreshSolve() {  
  console.log("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° refreshSolve()");

  let score = 0;
  let attempts = 0;
  const maxAttempts = 5;

  while (score < 100 && attempts < maxAttempts) {
    console.log(üîÅ Attempt #${attempts + 1});
    await doRefreshAll();  
    const corrected = await doCorrection();  
    if (!corrected) {
      console.warn("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î Correction ‡πÑ‡∏î‡πâ");
      return;
    }

    await fixIncorrect();  
    score = getScore();
    console.log(üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${score});
    attempts++;
  }

  if (score >= 100) {
    console.log("üèÜ ‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ï‡πá‡∏° 100 ‡πÅ‡∏•‡πâ‡∏ß!");
    await goNext();  
    console.log("‚úÖ ‡∏à‡∏ö refreshSolve()");
  } else {
    console.warn(‚ö†Ô∏è ‡∏ó‡∏≥‡∏ã‡πâ‡∏≥ ${attempts} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ï‡πá‡∏° (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${score}));
  }
}

refreshSolve();
